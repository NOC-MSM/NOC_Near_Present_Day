#!/usr/bin/env python3
"""
This version of mkslurm_hetjob_ensemble is customized for NOC Near Present Day simulations
"""
import argparse
import logging
import sys
from textwrap import dedent


def main(args):
    """Create slurm scripts

    Args:
        args: Parsed arguments.
    """

    # Verbosity
    logging.basicConfig(level=logging.INFO)
    cmd = f"{parser.prog} " + " ".join(
        [
            f"{'-' if len(arg)==1 else '--'}{arg.replace('_', '-')} {val}"
            for arg, val in vars(args).items()
        ]
    )
    logging.info("Running %s", cmd)

    nnodes = ( args.S + args.C ) // args.N + 1

    # Build slurm script

    # SBATCH settings
    string = f"""\
    #!/bin/bash
    #SBATCH --job-name={args.j}
    #SBATCH --time={args.t}
    #SBATCH --partition={args.p}
    #SBATCH --nodes={nnodes}
    #SBATCH --ntasks-per-core=1
    # Created by: {cmd}
    """
    string += """
    # ========================================================
    # PARAMETERS TO SET
    # Restart frequency (<0 days, >0 hours)
    FREQRST=CHANGEME
    # Simulation length (<0 days, >0 hours)
    LENGTH=CHANGEME
    # Parent initial time step (0: infer from time.step)
    # IT000 != 0 -> auto-resubmission is switched OFF
    IT000=CHANGEME
    # Name of this script (to resubmit)
    SCRIPTNAME=CHANGEME
    # ========================================================

    # Define useful functions
    get_var () {
        VARNAME=$1
        NAMNAME=$2
        VAR=$(grep "^\s*${VARNAME}\s*=.*" "$NAMNAME" | sed "s/[', ]//g")
        VAR=${VAR%%!*}
        VAR=${VAR#*=}
        echo "$VAR"
    }

    edit_var () {
        VARNAME=$1
        VAR=$2
        NAMNAMES=${*:3}
        CMD=$(echo sed -i "\\"s|^\\s*${VARNAME}\\s*=.*|\\t${VARNAME} = ${VAR},|g\\"" "$NAMNAMES")
        eval "$CMD"
    }

    get_timestep () {
        TIMENAME=$1
        TIMESTEP=$(grep -Eo '[0-9\.]+' "$TIMENAME")
        echo "$TIMESTEP"
    }

    # Convert days to hours
    if [ "$FREQRST" -lt 0 ]; then
        FREQRST=$(( FREQRST * -24 ))
    fi
    if [ "$LENGTH" -lt 0 ]; then
        LENGTH=$(( LENGTH * -24 ))
    fi

    # Get it000
    if [ "$IT000" -eq 0 ]; then
        RESUBMIT=true
        if test -f "time.step"; then
            IT000=$(get_timestep time.step)
        fi
        IT000=$(( IT000 + 1 ))
    else
        RESUBMIT=false
    fi

    # Get dt
    DT=$(get_var rn_dt namelist_cfg)
    DT=${DT%.*}

    # Edit namelists
    if [ "$IT000" -gt 1 ]; then
        # Use restarts
        edit_var ln_rstart ".true." ./namelist_cfg
        edit_var ln_tsd_init ".false." ./namelist_cfg

        # Set start
        TSTEP=$((IT000 - 1))
        IT000=$((TSTEP + 1))
        edit_var "nn_it000" "$IT000" ./namelist_cfg

        # Set restart prefixes
        EXP=$(get_var cn_exp ./namelist_cfg)
        OCERST_IN=${EXP}_$(printf "%08d" "$TSTEP")_restart
        ICERST_IN=${OCERST_IN}_ice
        edit_var cn_ocerst_in "'${OCERST_IN}'" ./namelist_cfg
        edit_var cn_icerst_in "'${ICERST_IN}'" ./namelist_ice_cfg

    else
        # Start from rest
        edit_var ln_rstart ".false." ./namelist_cfg
        edit_var ln_tsd_init ".true." ./namelist_cfg
        edit_var cn_ocerst_in "'dummy'" ./namelist_cfg
        edit_var cn_icerst_in "'dummy'" ./namelist_ice_cfg
        edit_var nn_it000 "1" ./namelist_cfg
    fi

    # Edit nn_itend
    IT000=$(get_var nn_it000 ./namelist_cfg)
    DT=$(get_var rn_dt ./namelist_cfg)
    DT=${DT%.*}
    ITEND=$(( IT000 - 1 + FREQRST * 60 * 60 / DT ))
    FINAL=$(( LENGTH * 60 * 60 / DT ))
    if [ "$ITEND" -ge "$FINAL" ]; then
        ITEND=$FINAL
    fi
    edit_var nn_itend "$ITEND" ./namelist_cfg

    # Submit next job
    if [ "$ITEND" -lt "$FINAL" ] && [ "$RESUBMIT" = true ]; then
        sbatch --dependency=afterok:"$SLURM_JOB_ID" "$SCRIPTNAME"
    fi

    # Create directories
    mkdir -p {RESTARTS,OUTPUT}
    """

    string += f"""
    # Link nemo
    ln -fs ../BLD/bin/nemo.exe nemo
    """
    slurm = dedent(string)

    # Environment
    string = f"""
    # Set environment
    module purge
    module load lmod
    module load slurm/21.08.5
    module load NEMO/prg-env

    export OMP_NUM_THREADS=1
    """
    slurm += dedent(string)

    # Srun
    string = [
        f"mpiexec.hydra -print-rank-map "
        + f"-ppn {args.m}"
        + f" -np {args.S} xios_server.exe :"
        + f" -np {args.C} nemo &"
    ]

    slurm += "\n".join(string +
            ['cd "$SLURM_SUBMIT_DIR" || exit\n']
    )

    tail = """
    wait

    # Print stats
    sacct -j "$SLURM_JOB_ID" --units=G --format=JobID,JobName,NNodes,Elapsed,AveRSS,MaxRSS,MaxRSSNode,MaxRSSTask

    # Move log files
    mkdir -p LOGS/"$SLURM_JOB_ID"
    mv {*.dat,*output*,*.stat*,communication_report.txt} LOGS/"$SLURM_JOB_ID"

    # Check time.step and ocean.output
    for NAMELIST in *namelist_cfg; do

        # Check that ocean.output exist
        OUTNAME=${NAMELIST//namelist_cfg/ocean.output}
        OUTNAME=LOGS/"$SLURM_JOB_ID"/"$OUTNAME"
        if [ ! -f  "$OUTNAME" ]; then
            echo "E R R O R : $OUTNAME is missing."
            exit 1
        fi

        # Check for errors
        ERROR=$(grep "E R R O R" "$OUTNAME" | wc -l)
        if [ "$ERROR" -gt 0 ]; then
            echo "E R R O R : errors found in $OUTNAME"
            exit 1
        fi

        # Check that time.step exist
        TIMENAME=${NAMELIST//namelist_cfg/time.step}
        if [ ! -f  "$TIMENAME" ]; then
            echo "E R R O R : $TIMENAME is missing."
            exit 1
        fi

        # Check nn_itend vs time.step
        EXPECTED=$(get_var nn_itend "$NAMELIST")
        ACTUAL=$(get_timestep "$TIMENAME")
        if [ "$ACTUAL" -lt "$EXPECTED" ]; then
            echo "E R R O R : $TIMENAME is $ACTUAL (expecting $EXPECTED)"
            exit 1
        fi
    done
    """
    slurm += dedent(tail)

    print(slurm)


if __name__ == "__main__":
    # Parse arguments
    parser = argparse.ArgumentParser(
        prog="mkslurm_immerse",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=" ".join(
            [
                "mkslurm_hetjob with custom code to run on NOC Anemone.",
            ]
        ),
        prefix_chars="-",
    )
    parser.add_argument("-S", help="number of XIOS servers", type=int, default=4)
    parser.add_argument(
        "-m", help="number of consecutive processes per node", type=int, default=1
    )
    parser.add_argument("-C", help="number of NEMO processes", type=int, default=28)
    parser.add_argument("-N", help="number of cores per node", type=int, default=64)
    parser.add_argument("-t", help="time limit", type=str, default="00:10:00")
    parser.add_argument("-j", help="job name", type=str, default="nemo_test")
    parser.add_argument("-p", help="partition", type=str, default="compute")
    # Let's go!
    main(parser.parse_args())
