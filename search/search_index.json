{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Welcome to the documentation for the Near-Present-Day simulations developed by the National Oceanography Centre </p>"},{"location":"#introduction","title":"Introduction","text":"<p>As part of the Atlantic Climate and Environment Strategic Science (AtlantiS) project, the National Oceanography Centre is developing a full suite of global ocean model configurations to perform multi-decadal Near-Present-Day simulations.</p> <p>Our aim is that the Near-Present-Day simulations will be kept up to date with a 1-3 month lag.</p>"},{"location":"#configurations","title":"Configurations","text":"<p>The Near-Present-Day simulations consists of a hierarchy of three ocean sea-ice configurations of NEMO v4.2 at 1\\(^{\\circ}\\), 1/4\\(^{\\circ}\\) and 1/12\\(^{\\circ}\\) nominal horizontal resolution.</p> <p>The key features of each configuration are summarised below:</p> eORCA1eORCA025eORCA12 <ul> <li>1\\(^{\\circ}\\) nominal horizontal resolution (j=331, i=360).</li> <li>75 vertical z\\(^{*}\\) levels.</li> <li>Eddy induced velocities determined using the Gent and McWilliams (1990) diffusion scheme.</li> <li>Coupled to SI\\(^{3}\\) sea ice engine.</li> <li>Initialised from World Ocean Atlas 2023 (1971-2001) climatology.</li> <li>Forced with JRA55-do (v1; 1976-2023) and climatologically adjusted ERA-5 (v1; 1976-present) atmospheric forcing.</li> </ul> <ul> <li>1/4\\(^{\\circ}\\) nominal horizontal resolution (j=1206, i=1440).</li> <li>75 vertical z\\(^{*}\\) levels.</li> <li>Eddy induced velocities determined using the grid-scale dependent Gent and McWilliams (1990) diffusion scheme.</li> <li>Coupled to SI\\(^{3}\\) sea ice engine.</li> <li>Initialised from World Ocean Atlas 2023 (1971-2001) climatology.</li> <li>Forced with JRA55-do (v1; 1976-2023) and climatologically adjusted ERA-5 (v1; 1976-present) atmospheric forcing.</li> </ul> <ul> <li>1/12\\(^{\\circ}\\) nominal horizontal resolution (j=3605, i=4320).</li> <li>75 vertical z\\(^{*}\\) levels.</li> <li>Coupled to SI\\(^{3}\\) sea ice engine.</li> <li>Initialised from World Ocean Atlas 2023 (1971-2001) climatology.</li> <li>Forced with climatologically adjusted ERA-5 (v1; 1976-present) atmospheric forcing.</li> </ul> <p>For more details on each model configuration see Deep Dives: Model Configurations.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>To get started, check out and set up an instance of the NPD GitHub repository:</p> <pre><code>git clone git@github.com:NOC-MSM/NOC_Near_Present_Day.git\n</code></pre> Helpful Tip... <ul> <li>It is not advised to checkout the respository in your home directory.</li> </ul> <p>Next, run the setup script to download NEMO &amp; compile the tools and configurations:</p> AnemoneArcher2 <pre><code>cd NOC_Near_Present_Day\n\n./setup\n</code></pre> <pre><code>cd NOC_Near_Present_Day\n\n./setup -s Archer2\n</code></pre> <p>By default, the script will setup for the Anemone HPC, which is ideally suited for development tasks or for the fast turnaround of smaller NPD configurations (e.g., eORCA1 or eORCA025).</p>"},{"location":"#running-an-experiment","title":"Running An Experiment","text":"<p>The global eORCA1 and eORCA025 configurations are ready to run. Here, we provide a brief overview on how to setup a first experiment with the default atmospheric forcing JRA55-do on the Anemone HPC:</p> eORCA1eORCA025 <p>All that is required to run the eORCA1 Near-Present-Day configuration starting from 1976 is: </p><pre><code>cd nemo/cfgs/GLOBAL_QCO/eORCA1\n\nsbatch run_nemo552_40x_10n.slurm\n</code></pre><p></p> <p>There are a few important variables to set in the runscript.</p> <p>The default configuration will generate a 10-year simulation without spin-up which is divided into 1-year jobs: </p><pre><code># ========================================================\n# PARAMETERS TO SET\n# time units used here for restart frequency and simulaion length\nTIME_UNITS=0 # 0=years ; 1=days ; 2=hours\n# Restart/resubmission frequency (in TIME_UNITS)\nFREQRST=1\n# job-step initial time step (0: infer from time.step)\n# IT000 != 0 -&gt; auto-resubmission is switched OFF\nIT000=0\n#\n# Simulation original starting time step (unchanged for LENGTHxTIME_UNITS)\nITBEGIN=1\n# Simulation length (in TIME_UNITS) \nLENGTH=10\n# Name of this script (to resubmit)\nSCRIPTNAME=run_nemo552_40x_10n.slurm\n# If conducting the repeat and reset T and S spinup set SPIN to 1, else set to 0\nSPIN=0\n</code></pre><p></p> <p>To run with ERA-5 atmospheric forcing, use the following command to modify the namelist file: </p><pre><code>cp namelist_cfg_ERA5 namelist_cfg\n</code></pre><p></p> <p>All that is required to run the eORCA025 Near-Present-Day configuration starting from 1976 is: </p><pre><code>cd nemo/cfgs/GLOBAL_QCO/eORCA025\n\nsbatch run_nemo1326_96x_26n.slurm\n</code></pre><p></p> <p>There are a few important variables to set in the runscript.</p> <p>The default configuration will generate a 3-year simulation without spin-up which is divided into 1-year jobs: </p><pre><code># ========================================================\n# PARAMETERS TO SET\n# time units used here for restart frequency and simulaion length\nTIME_UNITS=0 # 0=years ; 1=days ; 2=hours\n# Restart/resubmission frequency (in TIME_UNITS)\nFREQRST=1\n# job-step initial time step (0: infer from time.step)\n# IT000 != 0 -&gt; auto-resubmission is switched OFF\nIT000=0\n#\n# Simulation original starting time step (unchanged for LENGTHxTIME_UNITS)\nITBEGIN=1\n# Simulation length (in TIME_UNITS) \nLENGTH=3   \n# Name of this script (to resubmit)\nSCRIPTNAME=run_nemo1326_96x_26n.slurm\n# If conducting the repeat and reset T and S spinup set SPIN to 1, else set to 0\nSPIN=0\n</code></pre><p></p> <p>To run with ERA-5 atmospheric forcing, use the following command to modify the namelist file: </p><pre><code>cp namelist_cfg_ERA5 namelist_cfg\n</code></pre><p></p>"},{"location":"analysis/","title":"Analysis","text":""},{"location":"analysis/#analysis","title":"Analysis","text":"<p>Summary</p> <p>This page includes a gallery of tutorials &amp; example analyses undertaken using the Near-Present-Day simulation outputs.</p>"},{"location":"analysis/#available-tutorials","title":"Available Tutorials:","text":"<p><code>Tutorial 1: Exploring Sea Surface Temperature with Zarr Stores</code>     Accessing Near-Present-Day eORCA1-JRA55v1 monthly-mean outputs stored in Zarr stores using the NPD metadata tables &amp; visualising the seasonal climatology of global sea surface temperature.</p> <p><code>Tutorial 2: Exploring Sea Surface Temperature with Icechunk Repos</code>     Accessing Near-Present-Day eORCA1-ERA5v1 monthly mean Zarr outputs stored in Icechunk repositories using the OceanDataStore library &amp; visualising the seasonal climatology of global sea surface temperature. </p>"},{"location":"deep_dives/","title":"Deep Dives","text":""},{"location":"deep_dives/#deep-dives","title":"Deep Dives","text":"<p>Summary</p> <p>This page provide additional details on the parameter choices, initial conditions and output options of the Near-Present-Day simulations.</p>"},{"location":"deep_dives/#model-configurations","title":"Model Configurations","text":"<p>The Near-Present-Day integrations have been performed using a traceable hierarchy of three ocean sea-ice model configurations at 1\\(^{\\circ}\\), 1/4\\(^{\\circ}\\) and 1/12\\(^{\\circ}\\) nominal horizontal resolution.</p> <p>The Near-Present-Day configurations are based on the recent UK Global Ocean and Sea Ice configuration version 9 (GOSI9), which has been documented comprehensively in Guiavarc\u2019h et al. (2025).</p> <p>In this section, we describe each of the configurations in detail and provide references for those seeking further technical information.</p>"},{"location":"deep_dives/#ocean-model","title":"Ocean Model","text":"<p>All three Near-Present-Day configurations have been performed using the Nucleus for European Modelling of the Ocean (NEMO) modelling framework version 4.2.</p> <p>For a list of the additions made to the version 4.2 release, users are referred to the NEMO release notes.</p>"},{"location":"deep_dives/#model-grid-bathymetry","title":"Model Grid &amp; Bathymetry","text":"<p>The ocean model grids and bathymetry used in the Near-Present-Day simulations are the same eORCA global isotropic Mercator grids documented in Storkey et al (2018).</p> <p>The eORCA1, eORCA025 and eORCA12 have a nominal resolution of 1\\(^{\\circ}\\), 1/4\\(^{\\circ}\\) and 1/12\\(^{\\circ}\\) at the Equator. The meridional resolution of the eORCA1 model increases to 1/3\\(^{\\circ}\\) at the equator to improve the representation of equatorial ocean dynamics. In the Southern Hemisphere, all grids are extended to 85\\(^{\\circ}\\)S to include ice shelf cavities (see Guiavarc\u2019h et al. (2025)).</p> <p>All three configurations use a non-linear free surface and 75 vertical levels, meaning that grid cell thicknesses throughout the water column vary with time (z\\(^{*}\\) coordinate, Adcroft and Campin, 2004). Partial step topography is also used to ensure that the depth of each water column equates to the real depth of the ocean by modifying the thickness of the bottom grid cell (e.g., Barnier et al., 2006).  </p>"},{"location":"deep_dives/#mixing","title":"Mixing","text":"<ul> <li> <p>Momentum Advection: Vector-invariant form separating horizontal advection into a rotational term (scheme of Arakawa &amp; Lamb, 1981) and irrotational term (scheme of Hollingsworth et al., 1983).</p> </li> <li> <p>Tracer Advection: 4th Order Total Variance Diminishing (TVD) scheme (Zalesak, 1979) in both horizontal and vertical directions.</p> </li> <li> <p>Lateral Diffusion of Momentum: Performed along geopotential surfaces with the following parameters:</p> eORCA1eORCA025eORCA12 <ul> <li>Laplacian viscosity defined by 20,000 m\\(^{2}\\) s\\(^{-1}\\) poleward of 20\\(^{\\circ}\\)N/S, reducing with the meridional grid size towards the equator.</li> </ul> <ul> <li>Bi-Laplacian viscosity with a lateral viscous velocity = 0.0838 m s\\(^{-1}\\)</li> </ul> <ul> <li>Bi-Laplacian viscosity with a lateral viscous velocity = 0.1895 m s\\(^{-1}\\)</li> </ul> </li> <li> <p>Lateral Diffusion of Tracers: Performed on iso-neutral surfaces using Laplacian mixing with the following parameters:</p> eORCA1eORCA025eORCA12 <ul> <li>Lateral diffusive velocity = 0.018 m s\\(^{-1}\\).</li> </ul> <ul> <li>Lateral diffusive velocity = 0.011 m s\\(^{-1}\\).</li> </ul> <ul> <li>Lateral diffusive velocity = 0.027 m s\\(^{-1}\\).</li> </ul> </li> <li> <p>Vertical Mixing of Momentum &amp; Tracers: Performed using an updated version of the Gaspar et al., 1990 Turbulent Kinetic Energy (TKE) parameterisation.</p> </li> <li> <p>Adiabatic Eddy Mixing: Calculated using the parameterisation of Gent &amp; McWilliams, 1990. </p> eORCA1eORCA025 &amp; eORCA12 <ul> <li>Uses spatially-dependent coefficients (see Tr\u00e9guier et al., 1997).</li> <li>Zonal and meridional eddy-induced velocities (uo_eiv, vo_eiv) are output in addition to the resolved velocities (uo, vo).</li> </ul> <ul> <li>Use spatially- and temporally-dependent version of the parameterisation to account for the unresolved effects of eddies at high latitudes (see Guiavarc\u2019h et al. (2025)).</li> <li>Zonal and meridional eddy-induced velocities (uo_eiv, vo_eiv) are output in addition to the resolved velocities (uo, vo).</li> </ul> </li> </ul>"},{"location":"deep_dives/#equation-of-state","title":"Equation of State","text":"<p>All three Near-Present-Day simulations use the Thermodynamic Equation Of Seawater 2010 (TEOS-10, Ioc et al., 2010) and hence absolute salinity and conservative temperature variables are output rather than practical salinity and potential temperature as in EOS-80.</p>"},{"location":"deep_dives/#atmospheric-forcing","title":"Atmospheric Forcing","text":"<p>Two Near-Present-Day version 1 integrations have been perfomed using the JRA55-do atmospheric reanalysis (Tsujino et al, 2018) and a climatologically adjusted version of the ERA-5 atmospheric reanalysis (Hersbach et al., 2020).</p> <p>The JRA55-do forced Near-Present-Day integration spans the period 1976-2023, and uses the NCAR bulk formulae (Large and Yeager, 2009).</p> <p>The ERA-5 forced Near-Present-Day integration spans the period 1976-present, and uses ECMWF bulk formulae (IFS documentation, cy45). </p> <p>There is a well established Surface Air Temperature (SAT) bias at high-latitudes in the ERA-5 atmospheric reanalysis (Tjernstr\u00f6m &amp; Graversen, 2009; Zampieri et al., 2023) owing to the poor representation of snow atop of sea ice (Batrak &amp; M\u00fcller, 2019). To account for these large biases, a climatological adjustment is applied to the ERA-5 hourly 2 m temperature field over regions where (ERA-5) sea ice cover &gt; 0%. Climatological offset factors are determined by calculating the difference between the long-term mean (1960-2019) monthly 2 m temperature climatologies of ERA-5 and JRA55-do. To avoid step-like transitions between monthly adjustments, 2 m temperature offset factors are linearly interpolated in time to produce hourly surface forcing fields.</p> <p>Accounting for Current Feedback to the Atmosphere</p> <p>Since the JRA55-do atmospheric reanalysis already takes into account the coupling between ocean currents and surface wind wind stress (termed the Current Feedback), directly forcing an ocean model with reanalysis (relative) winds results in unrealistically weak mesoscale activity and large-scale circulation features (see Renault et al., 2020).</p> <p>To overcome this, the parameterisation of Renault et al., 2017 is used to remove the wind and surface stress anomalies induced by the reanalysis surface ocean currents and replace them with those induced by the currents of the Near-Present-Day simulation. This relies on a linear estimate for the current-stress coupling coefficient, \\(S_{\\tau} = \\alpha |U_{10_{abs}}| + \\beta\\), where \\(\\alpha\\) = -2.9x10\\(^{-3}\\) N s\\(^{2}\\) m\\(^{-4}\\) and \\(\\beta\\) = 0.008 N s m\\(^{-3}\\).</p>"},{"location":"deep_dives/#initial-conditions","title":"Initial Conditions","text":"<p>To initialise the Near-Present-Day integrations, conservative temperature and absolute salinity fields from the World Ocean Atlas 2023 (Reagen et al., 2024) Climate Normal (30-year average) corresponding to 1971-2000 are used.</p> <p>Each integration begins with a 3-year spin-up period during which the JRA55-do / adjusted ERA-5 1976 forcing is repeatedly applied while the initial conservative temperature and absolute salinity fields are reset to the final time-step of the previous simulation year.</p>"},{"location":"deep_dives/#sea-surface-salinity-restoration","title":"Sea Surface Salinity Restoration","text":"<p>The salinity at the sea surface is weakly restored to the World Ocean Atlas 2023 upper 10m average salinity (1991-2020) using a damping magnitude of -33.33 mm day\\(^{-1}\\) in all integrations.</p>"},{"location":"deep_dives/#sea-ice-model","title":"Sea Ice Model","text":"<p>The Near-Present-Day simulations use NEMO's recently introduced dynamic-thermodynamic continuum sea ice model, SI\\(^{3}\\) (Sea Ice modelling Integrated Initiative) (see Vancoppenolle et al., 2023).</p> <p>For a more detailed discussion on the SI\\(^{3}\\) model configuration, users are referred to Blockley et al. (2023) and Guiavarc\u2019h et al., in review.</p>"},{"location":"deep_dives/#creating-initial-conditions","title":"Creating Initial Conditions","text":"<p>Section Currently Under Development: Come Back Soon!</p> <p>This section will include a description on how to create initial conditions for Near-Present-Day integrations.</p>"},{"location":"deep_dives/#editing-the-runscript","title":"Editing the Runscript","text":"<p>To run your own Near-Present-Day integrations, you'll likely need to make changes to the <code>run_nemo_???.slurm</code> runscript in the <code>/nemo/cfgs/GLOBAL_QCO/eORCA??/</code> directory of your local installation of the NOC_Near_Present_Day repository.</p> <p>In this section, we discuss the key parameters you will need to modify to begin running your own Near-Present-Day experiments.</p> <p>Let's start by defining each of the parameters available in an example runscript <code>run_nemo_example.slurm</code>:</p> run_nemo_example.slurm<pre><code># ========================================================\n# PARAMETERS TO SET\n# time units used here for restart frequency and simulaion length\nTIME_UNITS=0 # 0=years ; 1=days ; 2=hours\n# Restart/resubmission frequency (in TIME_UNITS)\nFREQRST=1\n# job-step initial time step (0: infer from time.step)\n# IT000 != 0 -&gt; auto-resubmission is switched OFF\nIT000=0\n#\n# Simulation original starting time step (unchanged for LENGTHxTIME_UNITS)\nITBEGIN=1\n# Simulation length (in TIME_UNITS) \nLENGTH=3   \n# Name of this script (to resubmit)\nSCRIPTNAME=run_nemo_example.slurm\n# If conducting the repeat and reset T and S spinup set SPIN to 1, else set to 0\nSPIN=0\n</code></pre> <ul> <li> <p>TIME_UNITS is used to define the length of the simulation and to specify the resubmission frequency of the runscript. In the above example, <code>TIME_UNITS=0</code> indicates we are working in years.</p> </li> <li> <p>FREQRST defines the frequency (in the time units defined above) at which the runscript will be resubmitted as a SLURM batch job. In the above example, <code>FREQRST=1</code> indicates that every simulation year should be submitted as a separate SLURM batch job (dependent on the successful completion of the previous job/year).</p> </li> <li> <p>IT000 specifies the initial time-step of this job. If <code>IT000=0</code> then the initial time-step will be determined from the time.step file in the run directory (if no time.step files exists then IT000 is set to 1). When IT000 != 0, runscript resubmission is turned off and its value will be unchanged.</p> </li> <li> <p>ITBEGIN specifies the starting time-step of the simulation. This is used to update the namelist_cfg file with the final time-step of the job when a restart file is to be written.</p> </li> <li> <p>LENGTH defines the length of the simulation (in the time units defined above). The simulation length together with the frequency of resubmission (FREQRST) will determine the number of SLURM batch jobs which are created. In the above example, <code>LENGTH=3</code> and <code>FREQRST=1</code> means that 3 separate SLURM batch jobs will be required to complete this simulation.</p> </li> <li> <p>SCRIPTNAME defines the name of the runscript to be resubmitted as a SLURM batch job. In most cases this should be the name of the runscript and should be checked carefully!</p> </li> <li> <p>SPIN specifies that a spin-up simulation should be perfomed. If <code>SPIN=1</code>, the simulation year will be restarted and the atmospheric forcing repeated, but the initial temperature and salinity fields will be defined from the restart file produced at the final time-step of the previous simulation year. Once a spin-up simulation is completed, define <code>SPIN=0</code> to continue the simulation with the next year of atmospheric forcing.  </p> </li> </ul>"},{"location":"deep_dives/#a-typical-use-case","title":"A Typical Use Case:","text":"<p>Let's consider a typical example: a user would like to perform a 25-year hindcast simulation (2000-2024) starting with a 5-year spin-up simulation repeating the year 2000. The user would also like each simulation year to be submitted as a separate SLURM batch job.</p> <p>We can divide this workflow into two runscripts: (1) to perform the spin-up simulation from rest...</p> <p></p>run_nemo_example_spin-up.slurm<pre><code># ========================================================\n# PARAMETERS TO SET\n# time units used here for restart frequency and simulaion length\nTIME_UNITS=0 # 0=years ; 1=days ; 2=hours\n# Restart/resubmission frequency (in TIME_UNITS)\nFREQRST=1\n# job-step initial time step (0: infer from time.step)\n# IT000 != 0 -&gt; auto-resubmission is switched OFF\nIT000=0\n#\n# Simulation original starting time step (unchanged for LENGTHxTIME_UNITS)\nITBEGIN=1\n# Simulation length (in TIME_UNITS) \nLENGTH=5   \n# Name of this script (to resubmit)\nSCRIPTNAME=run_nemo_example_spin-up.slurm\n# If conducting the repeat and reset T and S spinup set SPIN to 1, else set to 0\nSPIN=1\n</code></pre> ...and (2) to perform the 25-year hindcast simulation.<p></p> run_nemo_example_hindcast.slurm<pre><code># ========================================================\n# PARAMETERS TO SET\n# time units used here for restart frequency and simulaion length\nTIME_UNITS=0 # 0=years ; 1=days ; 2=hours\n# Restart/resubmission frequency (in TIME_UNITS)\nFREQRST=1\n# job-step initial time step (0: infer from time.step)\n# IT000 != 0 -&gt; auto-resubmission is switched OFF\nIT000=0\n#\n# Simulation original starting time step (unchanged for LENGTHxTIME_UNITS)\nITBEGIN=1\n# Simulation length (in TIME_UNITS) \nLENGTH=30   \n# Name of this script (to resubmit)\nSCRIPTNAME=run_nemo_example_hindcast.slurm\n# If conducting the repeat and reset T and S spinup set SPIN to 1, else set to 0\nSPIN=0\n</code></pre> <p>Note on Modifying Parameters between Runscripts</p> <p>In the example above, we did not modify <code>ITBEGIN</code> in <code>run_nemo_example_hindcast.slurm</code> since using <code>IT000=0</code> means that this simulation will automatically start in 2001 following the final year of the 2000 spin-up simulation.</p> <p>Also, note that <code>LENGTH=30</code> in <code>run_nemo_example_hindcast.slurm</code> defines the total simulation length in years, including the 5-year spin-up period and 25-year hindcast, rather than the number of additional years to simulate starting from 2001.  </p>"},{"location":"deep_dives/#storing-output-with-a-zoom-domain","title":"Storing Output with a Zoom Domain","text":"<p>Section Currently Under Development: Come Back Soon!</p> <p>This section will include instructions on how to output variables for a sub-domain of the global eORCA grid.</p>"},{"location":"outputs/","title":"Outputs","text":""},{"location":"outputs/#outputs","title":"Outputs","text":"<p>Summary</p> <p>This page provides information on the ocean &amp; sea-ice outputs made available from the Near-Present-Day simulations at 5-day, monthly and annual frequency &amp; how to access them using the JASMIN Object Store.</p>"},{"location":"outputs/#primary-outputs","title":"Primary Outputs","text":"<p>Primary outputs of the Near-Present-Day simulations are those variables which are calculated online at runtime and are written to netCDF files according to where they are defined on the eORCA grid.</p> <p>Example: eORCA1</p> <p>The conservative temperature <code>thetao_con</code> averaged at monthly intervals will be stored in the <code>eORCA1_1m_YYYYMM_grid_T.nc</code> file. </p> <p>Below we include a table of the available ocean and sea-ice variables output by each Near-Present-Day simulation:</p>"},{"location":"outputs/#available-ocean-sea-ice-outputs","title":"Available Ocean &amp; Sea-Ice Outputs:","text":"<ul> <li>ERA-5 Adjusted (1976-present)</li> </ul> <ul> <li>JRA55-do (1976-2023)</li> </ul>"},{"location":"outputs/#secondary-outputs","title":"Secondary Outputs","text":"<p>Secondary outputs of the Near-Present-Day simulations include those diagnostics which are calculated offline using the primary output variables. In many cases, these outputs will be produced during the analysis of the Near-Present-Day simulations, however, a collection of especially popular diagnostics will be made available to users.</p>"},{"location":"outputs/#atlantic-meridional-overturning-circulation-diagnostics","title":"Atlantic Meridional Overturning Circulation Diagnostics","text":"<p>The Atlantic Meridional Overturning Circulation (AMOC) is a fundamental component of the global climate system owing to its role in the redistribution of heat, nutrients and freshwater. On account of its wider societal significance, a number of continuous ocean observing systems have been deployed throughout the Atlantic Ocean to monitor the state and variability of the AMOC.</p> <p>The METRIC Python package allows users to calculate meridional overturning and heat transport diagnostics in numerical models which are equivalent (and hence comparable) to existing observations at the RAPID (26.5\\(^{\\circ}\\)N), MOVE (16\\(^{\\circ}\\)N) and SAMBA (34.5\\(^{\\circ}\\)S) (see Danabasoglu et al., 2021).</p> <p>Diagnostics including meridional overturning stream functions and the meridional fluxes of heat and freshwater will be made available as secondary output variables via the JASMIN Object Store.</p>"},{"location":"outputs/#accessing-near-present-day-data-via-the-jasmin-object-store","title":"Accessing Near-Present-Day Data via the JASMIN Object Store.","text":"<p>To improve the accessibility of the large volumes of data generated by the Near-Present-Day simulations, primary and secondary output variables will be made available via the JASMIN Object Store. For those who are unfamiliar with object storage, we suggest reading the primer below before getting started accessing the available outputs.</p>"},{"location":"outputs/#what-is-object-storage","title":"What is Object Storage?","text":"<p>Object storage is a fairly modern data storage solution that provides an efficient, scalable and collaborative way to store and manage large volumes of scientific data. </p> <p>Although most of us are accustomed to working with traditional hierarchical file systems (think folders and file paths), in object storage data is stored as objects in \"buckets\" rather than folders. Each object consists of </p> <ol> <li>Data  For example, a sea surface temperature dataset.</li> <li>Metadata  Descriptive information about the data.</li> <li>Unique Identifier  Used to retrieve the object.</li> </ol> <p>Object storage systems have two especially valuable properties for ocean-climate applications:</p> <ul> <li>Scalability: Since object stores employ a flat storage architecture, they can easily handle petabytes - exabytes of data.</li> <li>Accessibility: Since objects are accessed via Application Programming Interfaces (APIs), users can easily retrieve and analyse data from anywhere over HTTP, with authentication using HTTP headers.</li> </ul> <p>Object stores are generally considered an efficient and cost-effective way to store and access data from the cloud, and are available from all the major cloud service providers (e.g., Amazon Web Services, Azure). </p>"},{"location":"outputs/#introduction-to-the-jasmin-object-store","title":"Introduction to the JASMIN Object Store","text":"<p>JASMIN is the UK's data analysis facility for environmental science, providing storage and compute facilities to enable data-intensive ocean-climate research. One such storage facility is the JASMIN object store. The JASMIN object store is S3 compatible for those already familiar with AWS.</p> <p>The JASMIN object store is organised into tenancies (equivalent to Group Workspaces for those already familiar with JASMIN). Outputs from the Near-Present-Day simulations are stored in the <code>noc-msm-o</code> tenancy using the following structure:</p>"},{"location":"outputs/#npd-jra55-do-v1","title":"NPD JRA55-do v1","text":"<p>Outputs available for the Near-Present-Day simulations using the JRA55-do atmospheric forcing dataset (1976-2024) are stored in Zarr stores (see below) in the <code>npd-eorca1-jra55v1</code> and <code>npd-eorca025-jra55v1</code> buckets, which correspond to the eORCA1 and eORCA025 model configurations, respectively. Each Zarr store is accessible (read-only) over HTTP using the URL prefix <code>https://noc-msm-o.s3-ext.jc.rl.ac.uk</code>.</p> <pre><code>---\ntitle: JRA55-do v1 Near-Present-Day Outputs available via JASMIN Object Storage\nconfig:\n  layout: elk\n  look: handDrawn\n  theme: neutral\n---\ngraph LR\n  subgraph npd-eorca1-jra55v1 [eORCA1]\n      eORCA1.T1m[T1m]\n      eORCA1.U1m[U1m]\n      eORCA1.V1m[V1m]\n      eORCA1.T1y[T1y]\n      eORCA1.U1y[U1y]\n      eORCA1.V1y[V1y]\n     end\n  subgraph npd-eorca025-jra55v1 [eORCA025]\n      eORCA025.T5d[T5d]\n      eORCA025.U5d[U5d]\n      eORCA025.V5d[V5d]\n      eORCA025.T1m[T1m]\n      eORCA025.U1m[U1m]\n      eORCA025.V1m[V1m]\n      eORCA025.T1y[T1y]\n      eORCA025.U1y[U1y]\n      eORCA025.V1y[V1y]\n     end\n  subgraph npd-eorca12-jra55v1 [eORCA12]\n      eORCA12.T5d[T5d]\n      eORCA12.U5d[U5d]\n      eORCA12.V5d[V5d]\n      eORCA12.T1m[T1m]\n      eORCA12.U1m[U1m]\n      eORCA12.V1m[V1m]\n      eORCA12.T1y[T1y]\n      eORCA12.U1y[U1y]\n      eORCA12.V1y[V1y]\n     end\n\n    A[noc-msm-o.s3-ext.jc.rl.ac.uk] --&gt; B[npd-eorca1-jra55v1]\n    B --&gt; npd-eorca1-jra55v1\n    A --&gt; C[npd-eorca025-jra55v1]\n    C --&gt; npd-eorca025-jra55v1\n    A --&gt; D[npd-eorca12-jra55v1]\n    D --&gt; npd-eorca12-jra55v1</code></pre> Note <p>The URL prefix provided above is for users seeking to access Near-Present-Day outputs from the JASMIN External Cloud and locations external to JASMIN.</p> <p>From inside JASMIN, including LOTUS compute nodes and Scientific Analysis servers the URL prefix <code>https://noc-msm-o.s3.jc.rl.ac.uk</code> can be used.</p> <p>Within a given bucket, output data available depends on the chosen model configuration.</p> <p>For the coarse resolution eORCA1 configuration, output variables, available as monthly and annual means, are stored in 'sub-buckets' (note that, in reality, these are simply prefixes used to identify each variable) determined according to the grid point where the variable is defined. For example, the <code>npd-eorca1-jra55v1/T1m</code> 'sub-bucket' contains all the monthly-mean output variables stored at T-grid points.</p> <p>For the finer resolution eORCA025 and eORCA12 configurations, output variables are available as 5-day, monthly and annual means. The monthly and annual mean output variables are stored analogously to the eORCA1 configuration described above. 5-day mean output variables are stored in 'sub-buckets' according to their year and their location on the NEMO model grid. For example, the <code>npd-eorca025-jra55v1/T5d/1976</code> 'sub-bucket' contains all of the 5-day mean output variables stored at T-grid points during 1976.</p> <p>For more information on how variables are defined on the eORCA grid, users are referred to the NEMO documentation.</p> <pre><code>---\ntitle: Example eORCA025 5-day mean outputs available via JASMIN Object Storage\nconfig:\n  layout: elk\n  look: handDrawn\n  theme: neutral\n---\ngraph TB\n  subgraph 1976_T5d [1976]\n      1976_T5d.thetao_con[thetao_con]\n      1976_T5d.so_abs[so_abs]\n     end\n  subgraph 1976_U5d [1976]\n      1976_U5d.uo[uo]\n      1976_U5d.uos[uos]\n     end\n  subgraph 1976_V5d [1976]\n      1976_V5d.vo[vo]\n      1976_V5d.vos[vos]\n     end\n  subgraph 1977_T5d [1977]\n      1977_T5d.thetao_con[thetao_con]\n      1977_T5d.so_abs[so_abs]\n     end\n  subgraph 1977_U5d [1977]\n      1977_U5d.uo[uo]\n      1977_U5d.uos[uos]\n     end\n  subgraph 1977_V5d [1977]\n      1977_V5d.vo[vo]\n      1977_V5d.vos[vos]\n     end\n\n  A[npd-eorca025-jra55v1] --&gt; T5d\n  A[npd-eorca025-jra55v1] --&gt; U5d\n  A[npd-eorca025-jra55v1] --&gt; V5d\n  T5d --&gt; 1976_T5d\n  T5d --&gt; 1977_T5d \n  U5d --&gt; 1976_U5d\n  U5d --&gt; 1977_U5d\n  V5d --&gt; 1976_V5d\n  V5d --&gt; 1977_V5d</code></pre>"},{"location":"outputs/#npd-era-5-v1","title":"NPD ERA-5 v1","text":"<p>Outputs available for the Near-Present-Day simulations using a climatologically adjusted version of the ERA-5 atmospheric forcing dataset (1976-present) are stored in Icechunk repositories (see below) in the <code>npd-eorca1-era5v1</code>, <code>npd-eorca025-era5v1</code> and <code>npd-eorca12-era5v1</code> buckets, which correspond to the eORCA1, eORCA025 and eORCA12 model configurations, respectively.</p> <pre><code>---\ntitle: ERA-5 v1 Near-Present-Day Outputs available via JASMIN Object Storage\nconfig:\n  layout: elk\n  look: handDrawn\n  theme: neutral\n---\ngraph LR\n  subgraph npd-eorca1-era5v1 [eORCA1]\n      eORCA1.T1m[T1m]\n      eORCA1.U1m[U1m]\n      eORCA1.V1m[V1m]\n      eORCA1.W1m[W1m]\n      eORCA1.I1m[I1m]\n      eORCA1.S1m[S1m]\n      eORCA1.T1y[T1y]\n      eORCA1.U1y[U1y]\n      eORCA1.V1y[V1y]\n      eORCA1.W1y[W1y]\n      eORCA1.I1y[I1y]\n      eORCA1.S1y[S1y]\n     end\n  subgraph npd-eorca025-era5v1 [eORCA025]\n      eORCA025.T5d_3d[T5d_3d]\n      eORCA025.U5d_3d[U5d_3d]\n      eORCA025.V5d_3d[V5d_3d]\n      eORCA025.T5d_4d[T5d_4d]\n      eORCA025.U5d_4d[U5d_4d]\n      eORCA025.V5d_4d[V5d_4d]\n      eORCA025.W5d_4d[W5d_4d]\n      eORCA025.I5d_3d[I5d_3d]\n      eORCA025.S5d_1d[S5d_1d]\n      eORCA025.T1m_3d[T1m_3d]\n      eORCA025.U1m_3d[U1m_3d]\n      eORCA025.V1m_3d[V1m_3d]\n      eORCA025.T1m_4d[T1m_4d]\n      eORCA025.U1m_4d[U1m_4d]\n      eORCA025.V1m_4d[V1m_4d]\n      eORCA025.W1m_4d[W1m_4d]\n      eORCA025.I1m_3d[U1m_3d]\n      eORCA025.S1m_1d[S1m_1d]\n      eORCA025.T1y_3d[T1y_3d]\n      eORCA025.U1y_3d[U1y_3d]\n      eORCA025.V1y_3d[V1y_3d]\n      eORCA025.T1y_4d[T1y_4d]\n      eORCA025.U1y_4d[U1y_4d]\n      eORCA025.V1y_4d[V1y_4d]\n      eORCA025.W1y_4d[W1y_4d]\n      eORCA025.I1y_3d[I1y_3d]\n      eORCA025.S1y_1d[S1y_1d]\n     end\n  subgraph npd-eorca12-era5v1 [eORCA12]\n      eORCA12.T5d_3d[T5d_3d]\n      eORCA12.U5d_3d[U5d_3d]\n      eORCA12.V5d_3d[V5d_3d]\n      eORCA12.T5d_4d[T5d_4d]\n      eORCA12.U5d_4d[U5d_4d]\n      eORCA12.V5d_4d[V5d_4d]\n      eORCA12.W5d_4d[W5d_4d]\n      eORCA12.I5d_3d[I5d_3d]\n      eORCA12.S5d_1d[S5d_1d]\n      eORCA12.T1m_3d[T1m_3d]\n      eORCA12.U1m_3d[U1m_3d]\n      eORCA12.V1m_3d[V1m_3d]\n      eORCA12.T1m_4d[T1m_4d]\n      eORCA12.U1m_4d[U1m_4d]\n      eORCA12.V1m_4d[V1m_4d]\n      eORCA12.W1m_4d[W1m_4d]\n      eORCA12.I1m_3d[U1m_3d]\n      eORCA12.S1m_1d[S1m_1d]\n      eORCA12.T1y_3d[T1y_3d]\n      eORCA12.U1y_3d[U1y_3d]\n      eORCA12.V1y_3d[V1y_3d]\n      eORCA12.T1y_4d[T1y_4d]\n      eORCA12.U1y_4d[U1y_4d]\n      eORCA12.V1y_4d[V1y_4d]\n      eORCA12.W1y_4d[W1y_4d]\n      eORCA12.I1y_3d[I1y_3d]\n      eORCA12.S1y_1d[S1y_1d]\n     end\n\n    A[noc-msm-o.s3-ext.jc.rl.ac.uk] --&gt; B[npd-eorca1-era5v1]\n    B --&gt; npd-eorca1-era5v1\n    A --&gt; C[npd-eorca025-era5v1]\n    C --&gt; npd-eorca025-era5v1\n    A --&gt; D[npd-eorca12-era5v1]\n    D --&gt; npd-eorca12-era5v1</code></pre>"},{"location":"outputs/#using-the-jasmin-object-store","title":"Using the JASMIN Object Store","text":"<p>Now we have seen how the outputs of the Near-Present-Day simulations are structured within the JASMIN object store, our next step is accessing this data from a local or remote machine.</p> <p>Although many users will be more familiar with analysing ocean-climate data via netCDF files, output variables generated by the Near-Present-Day simulations are stored in Analysis-Ready Cloud-Optimised (ARCO) Zarr stores and Icechunk repositories. </p> <p>A Brief Introduction to Zarr</p> <p>Zarr is an open source, flexible and efficient storage format designed for chunked, compressed, N-dimensional arrays. At its simplest, Zarr can be considered a cloud-native alternative to netCDF files since it consists of binary data files (chunks) accompanied by external metadata files.</p> <p>One important difference between archival file formats (e.g., netCDF) and Zarr is that there is no single Zarr file. Instead, a Zarr store (typically given the suffix .zarr - although this is not a requirement) is a directory containing chunks of data stored in compressed binary files and JSON metadata files containing the array configuration and compression used.</p> <p>Zarr works especially well in combination with cloud storage, such as the JASMIN object store, given that users can access data concurrently from multiple threads or processes using Python or a number of other programming languages.</p> <p>Click here more information on the Zarr specification.</p> <p>A Brief Introduction to Icechunk</p> <p>Icechunk is an open-source, cloud-native transactional tensor storage engine designed for N-dimensional data in cloud object storage. At its simplest, Icechunk can be considered a \"transactional storage engine for Zarr\", meaning that Icechunk manages all of the I/O for reading, writing and updating metadata and chunk data &amp; keeps track of changes (referred to as transactions) to the store in the form of snapshots. </p> <p>In place of Zarr store, users create an Icechunk repository, which functions as both a self-contained Zarr store and a database of the snapshots resulting from transactions (e.g., updating values or writing new values in the store). </p> <p>This allows Icechunk repositories to support data version control, since users can time-travel to previous snapshots of a repository.</p> <p>Click here for an overview of Icechunk.</p>"},{"location":"outputs/#method-1-accessing-icechunk-repositories-using-the-oceandatastore-library","title":"Method 1: Accessing Icechunk Repositories using the OceanDataStore library:","text":"<p>The simplest way to access ERA-5 Near-Present-Day simulation outputs is to use the OceanDataStore Python library designed to streamline accessing ocean model outputs stored in cloud object storage. To learn more about OceanDataStore click here.</p> <p>Here, we will provide an example of using the OceanDataCatalog API to access outputs from the eORCA1-ERA5v1 Near-Present-Day configuration:</p> Installing OceanDataStore with pip<pre><code># Create and Activate a new Python virtual environment:\nsource /path/to/my/venv/bin/activate\n\n# Install OceanDataStore from GitHub:\npip install git+https://github.com/NOC-MSM/OceanDataStore.git\n</code></pre> <p>Now, in a Python script or Jupyter / Marimo Notebook, we will access the annual mean sea surface temperature <code>tos_con</code> (1976-present) data:</p> Example: Accessing eORCA1-ERA5v1 Sea Surface Temperature via OceanDataCatalog<pre><code># Import required Python packages:\nfrom OceanDataStore import OceanDataCatalog\n\n# Create instance of OceanDataCatalog to access National Oceanography Centre Spatio-Temporal Access Catalog:\ncatalog = OceanDataCatalog(catalog_name=\"noc-model-stac\")\n\n# Search for sea surface conservative temperature (SST) outputs:\ncatalog.search(collection='noc-npd', variable='tos_con')\n\n# Let's access the SST variables first ID, corresponding to the eORCA1 ERA-5v1 simulation as an xarray Dataset:\nds = catalog.open_dataset(id=catalog.Items[0].id,\n                          variables=['tos_con'],\n                          )\n</code></pre>"},{"location":"outputs/#method-2a-accessing-zarr-stores-directly-via-url","title":"Method 2a: Accessing Zarr Stores Directly via URL","text":"<p>The simplest way to access JRA55-do v1 Near-Present-Day simulation outputs is to use the URLs included in the Available Ocean &amp; Sea-Ice Outputs in combination with xarray - a Python package for working with labelled multi-dimensional arrays. Here, we will provide an example of accessing the annual mean sea surface temperature <code>tos_con</code> dataset (1976-2023) output by the eORCA1-JRA55v1 Near-Present-Day configuration:</p> Example: Accessing eORCA1-JRA55v1 Sea Surface Temperature via URL<pre><code># Import required Python packages:\nimport xarray as xr\n\n# Define path to sea surface temperature dataset in the JASMIN object store:\nsst_url = \"https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca1-jra55v1/T1y/tos_con\"\n\n# Open sea surface conservative temperature (C) dataset with xarray:\ntos_con = xr.open_zarr(sst_url, consolidated=True, chunks={}) # (1)\n</code></pre> <ol> <li> Here, <code>consolidated=True</code> means open the store using zarr\u2019s consolidated metadata capability and <code>chunks={}</code> means load the data with dask using engine preferred chunks. See the xarray documentation for more details.</li> </ol>"},{"location":"tutorial_1_exploring_sst_zarr/","title":"Tutorial 1: Exploring Sea Surface Temperature using Zarr","text":"In\u00a0[1]: Copied! <pre># -- Importing Python libraries -- #\nimport pandas as pd\nimport xarray as xr\n</pre> # -- Importing Python libraries -- # import pandas as pd import xarray as xr In\u00a0[\u00a0]: Copied! <pre># -- Accessing eORCA1-JRA55v1 SST data using data catalog -- #\n# Defining the NPD data catalog URL:\ncatalog_url = \"https://raw.githubusercontent.com/NOC-MSM/NOC_Near_Present_Day/main/jasmin_os/catalog/npd_jra55_v1_catalog.csv\"\n\n# Read the data catalog using Pandas:\ncatalog = pd.read_csv(catalog_url)\ncatalog\n</pre> # -- Accessing eORCA1-JRA55v1 SST data using data catalog -- # # Defining the NPD data catalog URL: catalog_url = \"https://raw.githubusercontent.com/NOC-MSM/NOC_Near_Present_Day/main/jasmin_os/catalog/npd_jra55_v1_catalog.csv\"  # Read the data catalog using Pandas: catalog = pd.read_csv(catalog_url) catalog Out[\u00a0]: variable standard_name long_name units dims model grid freq url 0 e3t cell_thickness t-cell thickness m ('time_counter', 'deptht', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 1 thetao_con sea_water_conservative_temperature sea_water_conservative_temperature degC ('time_counter', 'deptht', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 2 so_abs sea_water_absolute_salinity sea_water_absolute_salinity g/kg ('time_counter', 'deptht', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 3 zos sea_surface_height_above_geoid sea surface height above geoid m ('time_counter', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 4 zossq square_of_sea_surface_height_above_geoid square of sea surface height above geoid m2 ('time_counter', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... ... ... ... ... ... ... ... ... ... ... 389 avt_evd enhanced_vertical_heat_diffusivity convective enhancement of vertical diffusivity m2/s ('time_counter', 'depthw', 'y', 'x') eORCA025 W 1y https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 390 diftrto ocean_vertical_tracer_diffusivity_due_to_tides vertical diffusivity due to tidal mixing m2/s ('time_counter', 'depthw', 'y', 'x') eORCA025 W 1y https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 391 wmo upward_ocean_mass_transport vertical mass transport kg/s ('time_counter', 'depthw', 'y', 'x') eORCA025 W 1y https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 392 wo upward_sea_water_velocity w m/s ('time_counter', 'depthw', 'y', 'x') eORCA025 W 1y https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... 393 w2o square_of_upward_sea_water_velocity ww m/s ('time_counter', 'depthw', 'y', 'x') eORCA025 W 1y https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... <p>394 rows \u00d7 9 columns</p> In\u00a0[3]: Copied! <pre># -- Querying eORCA1-JRA55v1 SST Dataset -- #\n# Querying the dataset to find monthly SST outputs from the eORCA1 model:\ncatalog.query(\"variable == 'tos_con' &amp; freq == '1m' &amp; model == 'eORCA1'\")\n</pre> # -- Querying eORCA1-JRA55v1 SST Dataset -- # # Querying the dataset to find monthly SST outputs from the eORCA1 model: catalog.query(\"variable == 'tos_con' &amp; freq == '1m' &amp; model == 'eORCA1'\")  Out[3]: variable standard_name long_name units dims model grid freq url 23 tos_con sea_surface_temperature sea_surface_conservative_temperature degC ('time_counter', 'y', 'x') eORCA1 T 1m https://noc-msm-o.s3-ext.jc.rl.ac.uk/npd-eorca... In\u00a0[4]: Copied! <pre># -- Load eORCA1-JRA55v1 SST Dataset -- #\n# Use the catalog URL to load the dataset using xarray:\nurl = catalog.query(\"variable == 'tos_con' &amp; freq == '1m' &amp; model == 'eORCA1'\")[\"url\"].iloc[0]\nds = xr.open_zarr(url)\nds\n</pre> # -- Load eORCA1-JRA55v1 SST Dataset -- # # Use the catalog URL to load the dataset using xarray: url = catalog.query(\"variable == 'tos_con' &amp; freq == '1m' &amp; model == 'eORCA1'\")[\"url\"].iloc[0] ds = xr.open_zarr(url) ds Out[4]: <pre>&lt;xarray.Dataset&gt; Size: 277MB\nDimensions:        (y: 331, x: 360, time_counter: 577)\nCoordinates:\n    nav_lat        (y, x) float64 953kB dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;\n    nav_lon        (y, x) float64 953kB dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;\n    time_centered  (time_counter) datetime64[ns] 5kB dask.array&lt;chunksize=(1,), meta=np.ndarray&gt;\n  * time_counter   (time_counter) datetime64[ns] 5kB 1976-01-16T12:00:00 ... ...\nDimensions without coordinates: y, x\nData variables:\n    tos_con        (time_counter, y, x) float32 275MB dask.array&lt;chunksize=(1, 331, 360), meta=np.ndarray&gt;</pre>xarray.Dataset<ul><li>Dimensions:<ul><li>y: 331</li><li>x: 360</li><li>time_counter: 577</li></ul></li><li>Coordinates: (4)<ul><li>nav_lat(y, x)float64dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;  Array   Chunk   Bytes   0.91 MiB   0.91 MiB   Shape   (331, 360)   (331, 360)   Dask graph   1 chunks in 2 graph layers   Data type   float64 numpy.ndarray  360 331 </li><li>nav_lon(y, x)float64dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;  Array   Chunk   Bytes   0.91 MiB   0.91 MiB   Shape   (331, 360)   (331, 360)   Dask graph   1 chunks in 2 graph layers   Data type   float64 numpy.ndarray  360 331 </li><li>time_centered(time_counter)datetime64[ns]dask.array&lt;chunksize=(1,), meta=np.ndarray&gt;bounds :time_centered_boundslong_name :Time axisstandard_name :timetime_origin :1900-01-01 00:00:00  Array   Chunk   Bytes   4.51 kiB   8 B   Shape   (577,)   (1,)   Dask graph   577 chunks in 2 graph layers   Data type   datetime64[ns] numpy.ndarray  577 1 </li><li>time_counter(time_counter)datetime64[ns]1976-01-16T12:00:00 ... 2024-01-...axis :Tbounds :time_counter_boundslong_name :Time axisstandard_name :timetime_origin :1900-01-01 00:00:00<pre>array(['1976-01-16T12:00:00.000000000', '1976-02-15T12:00:00.000000000',\n       '1976-03-16T12:00:00.000000000', ..., '2023-11-16T00:00:00.000000000',\n       '2023-12-16T12:00:00.000000000', '2024-01-16T12:00:00.000000000'],\n      shape=(577,), dtype='datetime64[ns]')</pre></li></ul></li><li>Data variables: (1)<ul><li>tos_con(time_counter, y, x)float32dask.array&lt;chunksize=(1, 331, 360), meta=np.ndarray&gt;cell_methods :time: mean (interval: 3600 s)interval_operation :3600 sinterval_write :1 monthlong_name :sea_surface_conservative_temperatureonline_operation :averagestandard_name :sea_surface_temperatureunits :degC  Array   Chunk   Bytes   262.28 MiB   465.47 kiB   Shape   (577, 331, 360)   (1, 331, 360)   Dask graph   577 chunks in 2 graph layers   Data type   float32 numpy.ndarray  360 331 577 </li></ul></li><li>Indexes: (1)<ul><li>time_counterPandasIndex<pre>PandasIndex(DatetimeIndex(['1976-01-16 12:00:00', '1976-02-15 12:00:00',\n               '1976-03-16 12:00:00', '1976-04-16 00:00:00',\n               '1976-05-16 12:00:00', '1976-06-16 00:00:00',\n               '1976-07-16 12:00:00', '1976-08-16 12:00:00',\n               '1976-09-16 00:00:00', '1976-10-16 12:00:00',\n               ...\n               '2023-04-16 00:00:00', '2023-05-16 12:00:00',\n               '2023-06-16 00:00:00', '2023-07-16 12:00:00',\n               '2023-08-16 12:00:00', '2023-09-16 00:00:00',\n               '2023-10-16 12:00:00', '2023-11-16 00:00:00',\n               '2023-12-16 12:00:00', '2024-01-16 12:00:00'],\n              dtype='datetime64[ns]', name='time_counter', length=577, freq=None))</pre></li></ul></li><li>Attributes: (0)</li></ul> In\u00a0[5]: Copied! <pre># -- Plot Seasonal Climatology of SST -- #\nds.tos_con.groupby(\"time_counter.season\").mean().plot(col=\"season\", col_wrap=2)\n</pre> # -- Plot Seasonal Climatology of SST -- # ds.tos_con.groupby(\"time_counter.season\").mean().plot(col=\"season\", col_wrap=2) Out[5]: <pre>&lt;xarray.plot.facetgrid.FacetGrid at 0x145df5faacf0&gt;</pre>"},{"location":"tutorial_1_exploring_sst_zarr/#tutorial-1-exploring-sea-surface-temperature-using-zarr","title":"Tutorial 1: Exploring Sea Surface Temperature using Zarr\u00b6","text":""},{"location":"tutorial_1_exploring_sst_zarr/#description","title":"Description\u00b6","text":"<ul> <li>Jupyter Notebook demonstrating how to access &amp; explore the eORCA1-JRA55v1 Near-Present-Day monthly mean sea surface temperature output (1976-2023) stored in Zarr stores.</li> </ul>"},{"location":"tutorial_1_exploring_sst_zarr/#processing","title":"Processing\u00b6","text":"<ul> <li><p>The easiest way to access Near-Present-Day outputs stored in the JASMIN Object Store is to the data catalog publicly available on GitHub.</p> </li> <li><p>Below we will see how we can query the catalog to find variables and load them as an xarray Dataset using a read-only URL.</p> </li> </ul>"},{"location":"tutorial_1_exploring_sst_zarr/#visualise","title":"Visualise\u00b6","text":"<ul> <li><p>You'll notice that our SST output is returned as a lazy dataset comprised of dask arrays, meaning it is not yet loaded into memory.</p> </li> <li><p>Only once we have performed operations on out outputs and call .load() or .plot() will we execute the resulting task graph on our local machine and load the final result into memory.</p> </li> <li><p>Below we will compute a seasonal climatology of SST for the whole Near-Present-Day simulation (1976-2023) and plot this as four pcolormesh subplots.</p> </li> </ul>"},{"location":"tutorial_2_exploring_sst_icechunk/","title":"Tutorial 2: Exploring Sea Surface Temperature with OceanDataCatalog","text":"In\u00a0[1]: Copied! <pre># -- Importing Python libraries -- #\nfrom OceanDataStore import OceanDataCatalog\n</pre> # -- Importing Python libraries -- # from OceanDataStore import OceanDataCatalog In\u00a0[2]: Copied! <pre>catalog = OceanDataCatalog(catalog_name=\"noc-model-stac\")\n</pre> catalog = OceanDataCatalog(catalog_name=\"noc-model-stac\") <ul> <li>Let's search the Near-Present Day collection for all ocean model outputs including the sea surface temperature (SST) variable tos_con:</li> </ul> In\u00a0[3]: Copied! <pre>catalog.search(collection='noc-npd', variable='tos_con')\n</pre> catalog.search(collection='noc-npd', variable='tos_con')  <pre>            * Item ID: noc-npd/npd-eorca1-era5v1/gn_global/T1y\n              Title: eORCA1 ERA5v1 NPD T1y Icechunk repository\n              Description: Icechunk repository containing eORCA1 ERA5v1 NPD global ocean physics annual mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca1-era5v1/gn_global/T1m\n              Title: eORCA1 ERA5v1 NPD T1m Icechunk repository\n              Description: Icechunk repository containing eORCA1 ERA5v1 NPD global ocean physics monthly mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca025-era5v1/gn_global/T1y_3d\n              Title: eORCA025 ERA5v1 NPD T1y_3d Icechunk repository\n              Description: Icechunk repository containing eORCA025 ERA5v1 NPD global ocean physics annual mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca025-era5v1/gn_global/T1m_3d\n              Title: eORCA025 ERA5v1 NPD T1m_3d Icechunk repository\n              Description: Icechunk repository containing eORCA025 ERA5v1 NPD global ocean physics monthly mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca025-era5v1/gn_global/T5d_3d\n              Title: eORCA025 ERA5v1 NPD T5d_3d Icechunk repository\n              Description: Icechunk repository containing eORCA025 ERA5v1 NPD global ocean physics 5-day mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca12-era5v1/gn_global/T1y_3d\n              Title: eORCA12 ERA5v1 NPD T1y_3d Icechunk repository\n              Description: Icechunk repository containing eORCA12 ERA5v1 NPD global ocean physics annual mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n\n            * Item ID: noc-npd/npd-eorca12-era5v1/gn_global/T1m_3d\n              Title: eORCA12 ERA5v1 NPD T1m_3d Icechunk repository\n              Description: Icechunk repository containing eORCA12 ERA5v1 NPD global ocean physics monthly mean outputs defined at T-points.\n              Platform: gn_global\n              Start Date: 1976-01-01T00:00:00Z\n              End Date: 2024-12-31T00:00:00Z\n            \n</pre> <p>Next, we will open the annual-mean SST data from the 1-degree eORCA1 ERA5v1 simulation (second entry returned from our search) as an xarray Dataset by using the open_dataset() method:</p> In\u00a0[\u00a0]: Copied! <pre>ds = catalog.open_dataset(id=catalog.Items[1].id,\n                          variables=['tos_con'],\n                          )\n               \nds\n</pre> ds = catalog.open_dataset(id=catalog.Items[1].id,                           variables=['tos_con'],                           )                 ds Out[\u00a0]: <pre>&lt;xarray.Dataset&gt; Size: 282MB\nDimensions:        (time_counter: 588, y: 331, x: 360)\nCoordinates:\n    nav_lon        (y, x) float64 953kB dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;\n    nav_lat        (y, x) float64 953kB dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;\n    time_centered  (time_counter) datetime64[ns] 5kB dask.array&lt;chunksize=(1,), meta=np.ndarray&gt;\n  * time_counter   (time_counter) datetime64[ns] 5kB 1976-01-16T12:00:00 ... ...\nDimensions without coordinates: y, x\nData variables:\n    tos_con        (time_counter, y, x) float32 280MB dask.array&lt;chunksize=(1, 331, 360), meta=np.ndarray&gt;</pre>xarray.Dataset<ul><li>Dimensions:<ul><li>time_counter: 588</li><li>y: 331</li><li>x: 360</li></ul></li><li>Coordinates: (4)<ul><li>nav_lon(y, x)float64dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;  Array   Chunk   Bytes   0.91 MiB   0.91 MiB   Shape   (331, 360)   (331, 360)   Dask graph   1 chunks in 2 graph layers   Data type   float64 numpy.ndarray  360 331 </li><li>nav_lat(y, x)float64dask.array&lt;chunksize=(331, 360), meta=np.ndarray&gt;  Array   Chunk   Bytes   0.91 MiB   0.91 MiB   Shape   (331, 360)   (331, 360)   Dask graph   1 chunks in 2 graph layers   Data type   float64 numpy.ndarray  360 331 </li><li>time_centered(time_counter)datetime64[ns]dask.array&lt;chunksize=(1,), meta=np.ndarray&gt;standard_name :timelong_name :Time axistime_origin :1900-01-01 00:00:00bounds :time_centered_bounds  Array   Chunk   Bytes   4.59 kiB   8 B   Shape   (588,)   (1,)   Dask graph   588 chunks in 2 graph layers   Data type   datetime64[ns] numpy.ndarray  588 1 </li><li>time_counter(time_counter)datetime64[ns]1976-01-16T12:00:00 ... 2024-12-...axis :Tstandard_name :timelong_name :Time axistime_origin :1900-01-01 00:00:00bounds :time_counter_bounds<pre>array(['1976-01-16T12:00:00.000000000', '1976-02-15T12:00:00.000000000',\n       '1976-03-16T12:00:00.000000000', ..., '2024-10-16T12:00:00.000000000',\n       '2024-11-16T00:00:00.000000000', '2024-12-16T12:00:00.000000000'],\n      shape=(588,), dtype='datetime64[ns]')</pre></li></ul></li><li>Data variables: (1)<ul><li>tos_con(time_counter, y, x)float32dask.array&lt;chunksize=(1, 331, 360), meta=np.ndarray&gt;standard_name :sea_surface_temperaturelong_name :sea_surface_conservative_temperatureunits :degConline_operation :averageinterval_operation :3600 sinterval_write :1 monthcell_methods :time: mean (interval: 3600 s)  Array   Chunk   Bytes   267.28 MiB   465.47 kiB   Shape   (588, 331, 360)   (1, 331, 360)   Dask graph   588 chunks in 2 graph layers   Data type   float32 numpy.ndarray  360 331 588 </li></ul></li><li>Indexes: (1)<ul><li>time_counterPandasIndex<pre>PandasIndex(DatetimeIndex(['1976-01-16 12:00:00', '1976-02-15 12:00:00',\n               '1976-03-16 12:00:00', '1976-04-16 00:00:00',\n               '1976-05-16 12:00:00', '1976-06-16 00:00:00',\n               '1976-07-16 12:00:00', '1976-08-16 12:00:00',\n               '1976-09-16 00:00:00', '1976-10-16 12:00:00',\n               ...\n               '2024-03-16 12:00:00', '2024-04-16 00:00:00',\n               '2024-05-16 12:00:00', '2024-06-16 00:00:00',\n               '2024-07-16 12:00:00', '2024-08-16 12:00:00',\n               '2024-09-16 00:00:00', '2024-10-16 12:00:00',\n               '2024-11-16 00:00:00', '2024-12-16 12:00:00'],\n              dtype='datetime64[ns]', name='time_counter', length=588, freq=None))</pre></li></ul></li><li>Attributes: (0)</li></ul> In\u00a0[8]: Copied! <pre># -- Plot Seasonal Climatology of SST -- #\nds.tos_con.groupby(\"time_counter.season\").mean().plot(col=\"season\", col_wrap=2)\n</pre> # -- Plot Seasonal Climatology of SST -- # ds.tos_con.groupby(\"time_counter.season\").mean().plot(col=\"season\", col_wrap=2) Out[8]: <pre>&lt;xarray.plot.facetgrid.FacetGrid at 0x149a1c3497f0&gt;</pre>"},{"location":"tutorial_2_exploring_sst_icechunk/#tutorial-2-exploring-sea-surface-temperature-with-oceandatacatalog","title":"Tutorial 2: Exploring Sea Surface Temperature with OceanDataCatalog\u00b6","text":""},{"location":"tutorial_2_exploring_sst_icechunk/#description","title":"Description\u00b6","text":"<ul> <li>Jupyter Notebook demonstrating how to access &amp; explore the eORCA1-ERA5v1 Near-Present-Day monthly mean sea surface temperature output (1976-2023) stored in Icechunk repositories using the OceanDataCatalog API.</li> </ul>"},{"location":"tutorial_2_exploring_sst_icechunk/#processing","title":"Processing\u00b6","text":"<ul> <li>Create an instance of the OceanDataCatalog class to access the National Oceanography Centre ocean model Spatio-Temporal Access Catalog (noc-model-stac):</li> </ul>"},{"location":"tutorial_2_exploring_sst_icechunk/#visualise","title":"Visualise\u00b6","text":"<ul> <li><p>You'll notice that our SST output is returned as a lazy dataset comprised of dask arrays, meaning it is not yet loaded into memory.</p> </li> <li><p>Only once we have performed operations on out outputs and call .load() or .plot() will we execute the resulting task graph on our local machine and load the final result into memory.</p> </li> <li><p>Below we will compute a seasonal climatology of SST for the whole Near-Present-Day simulation (1976-2024) and plot this as four pcolormesh subplots.</p> </li> </ul>"},{"location":"validation/","title":"Validation","text":""},{"location":"validation/#validation","title":"Validation","text":"<p>Page Currently Under Development: Come Back Soon!</p> <p>This page will include a gallery of plots validating Near-Present-Day simulations against observations and ocean (re)analyses.</p> <p></p>"}]}